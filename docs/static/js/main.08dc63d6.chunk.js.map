{"version":3,"sources":["components/main/index.js","App.js","serviceWorker.js","index.js"],"names":["Main","state","definition","ritaGrammar","Rita","RiGrammar","grammar","componentDidMount","_redefineDefinition","expand","setState","render","className","id","Button","variant","onClick","href","target","rel","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8kDA4CeA,E,2MArCXC,MAAQ,CACJC,WAAY,2C,EAEhBC,YAAc,IAAIC,IAAKC,UAAUC,G,EAEjCC,kBAAoB,WAChB,EAAKC,uB,EAGTA,oBAAsB,WAClB,IAAMN,EAAa,EAAKC,YAAYM,SACpC,EAAKC,SAAS,CAAER,WAAYA,K,EAGhCS,OAAS,WAAO,IACJT,EAAe,EAAKD,MAApBC,WACR,OACI,yBAAKU,UAAU,OACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,kBACX,8CADJ,IACgC,yEADhC,IACiE,iDAA8B,iCAC3F,6BACA,0BAAMC,GAAG,cAAT,IAAwBX,IAE5B,kBAACY,EAAA,EAAD,CAAQF,UAAU,YAAYG,QAAQ,QAAQC,QAAS,EAAKR,qBAA5D,gBAEJ,yBAAKI,UAAU,UAAf,cACe,uBAAGK,KAAK,uBAAuBC,OAAO,SAASC,IAAI,uBAAnD,WADf,qBAEoB,uBAAGF,KAAK,oDAAoDC,OAAO,SAASC,IAAI,uBAAhF,QAFpB,cAGS,uBAAGF,KAAK,mFAAmFC,OAAO,SAASC,IAAI,uBAA/G,gBAHT,iBAIgB,uBAAGF,KAAK,kCAAkCC,OAAO,SAASC,IAAI,uBAA9D,mBAJhB,O,6BA3BGC,IAAMC,W,YCMVC,MAPf,WAEE,OACE,kBAAC,EAAD,OCIgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASjB,OAAO,kBAAC,EAAD,MAASkB,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.08dc63d6.chunk.js","sourcesContent":["import React from 'react';\nimport Rita from 'rita';\nimport Button from 'react-bootstrap/Button';\nimport grammar from './../../grammar.json';\n// var rita = require('rita');\n\nclass Main extends React.Component {\n    state = {\n        definition: \"definition is loading, hold on a minute\",\n    };\n    ritaGrammar = new Rita.RiGrammar(grammar);\n\n    componentDidMount = () => {\n        this._redefineDefinition()\n    }\n\n    _redefineDefinition = () => {\n        const definition = this.ritaGrammar.expand();\n        this.setState({ definition: definition })\n    }\n\n    render = () => {\n        const { definition } = this.state\n        return (\n            <div className=\"app\">\n                <div className=\"app-header\">\n                    <div className=\"definition-box\">\n                        <strong>technology</strong> <em>/tek-ˈnä-lə-jē/ n. (pl.</em> <strong>-technologies</strong><em>)</em>\n                        <br/>\n                        <span id=\"definition\"> {definition}</span>\n                    </div>\n                    <Button className=\"light-btn\" variant=\"light\" onClick={this._redefineDefinition}>Wait, what?</Button>\n                </div>\n                <div className=\"footer\">\n                    Created by <a href=\"https://tirtawr.com/\" target=\"_blank\" rel=\"noopener noreferrer\">tirtawr</a>. \n                    Generated using <a href=\"https://rednoise.org/rita/reference/RiGrammar.php\" target=\"_blank\" rel=\"noopener noreferrer\">Rita</a> with \n                    this <a href=\"https://github.com/tirtawr/definition-of-technology/blob/master/src/grammar.json\" target=\"_blank\" rel=\"noopener noreferrer\">grammar file</a>. \n                    Inspired by <a href=\"http://www.gamedefinitions.com/\" target=\"_blank\" rel=\"noopener noreferrer\">gamedefinitions</a>.\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Main","import React from 'react';\nimport Main from './components/main';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nfunction App() {\n  \n  return (\n    <Main/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}